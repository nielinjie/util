/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'nielinjie' at '6/27/14 3:54 PM' with Gradle 1.12
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.12/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
}
*/
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:grgit:0.2.1'
    }
}

import org.ajoberstar.grgit.*

import java.text.SimpleDateFormat
//XXX
def releaseDir='./deploy/totemPoles-release'
def deployDir='./deploy/appid7cz3f90co0'


task pkg() <<{
    def releaseRepo = Grgit.open(project.file(releaseDir))
    releaseRepo.checkout(branch: 'release')
    releaseRepo.pull()
    exec {
        workingDir releaseDir
        commandLine 'sbt', 'package'
    }
}


task cw(dependsOn:pkg) <<{
    file(deployDir+'/root').delete()
    def file=(fileTree(releaseDir+'/target/scala-2.10') {
        include '*.war'
    } as List)[0]
    copy {
        from zipTree(file)
        into('./deploy/appid7cz3f90co0/root')
    }
}


task commit(dependsOn: cw) << {
    def deployRepo = Grgit.open(project.file(deployDir))
    def clean=deployRepo.status().isClean()
    if (!clean) {
        deployRepo.add(patterns: ['.'])
        deployRepo.commit(message: "release - ${new SimpleDateFormat("yy-MM-dd HH:mm:ss").format(new Date())}", all: true)
    }else{
        println("Clean, commit skipped.")
    }

}

task push(dependsOn: commit)<<{
    System.setProperty("org.ajoberstar.grgit.auth.username","nielinjie")
    System.setProperty("org.ajoberstar.grgit.auth.password","baidu790127")
    def deployRepo = Grgit.open(project.file(deployDir))
    deployRepo.push()
}
